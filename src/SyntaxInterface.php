<?php

declare(strict_types=1);

namespace Xylemical\Code\Generator;

use Xylemical\Code\Definition\Constant;
use Xylemical\Code\Definition\Contract;
use Xylemical\Code\Definition\ElementInterface;
use Xylemical\Code\Definition\File;
use Xylemical\Code\Definition\Method;
use Xylemical\Code\Definition\Mixin;
use Xylemical\Code\Definition\Parameter;
use Xylemical\Code\Definition\Property;
use Xylemical\Code\Definition\Structure;
use Xylemical\Code\DefinitionInterface;
use Xylemical\Code\DocumentationInterface;
use Xylemical\Code\ExpressionInterface;
use Xylemical\Token\TokenStreamInterface;

/**
 * Converts the definition into the appropriate token stream.
 *
 * Token streams generated by classes from this, should not output whitespace
 * of any kind, as this should be then added by the appropriate style.
 */
interface SyntaxInterface {

  /**
   * Get the file as a token stream.
   *
   * @param \Xylemical\Code\Definition\File $file
   *   The file.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getFile(File $file): TokenStreamInterface;

  /**
   * Get the structure as a token stream.
   *
   * @param \Xylemical\Code\Definition\Structure $structure
   *   The structure.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getStructure(Structure $structure): TokenStreamInterface;

  /**
   * Get the contract as a token stream.
   *
   * @param \Xylemical\Code\Definition\Contract $contract
   *   The contract.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getContract(Contract $contract): TokenStreamInterface;

  /**
   * Get the mixin as a token stream.
   *
   * @param \Xylemical\Code\Definition\Mixin $mixin
   *   The mixin.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getMixin(Mixin $mixin): TokenStreamInterface;

  /**
   * Get the documentation as a token stream.
   *
   * @param \Xylemical\Code\DocumentationInterface $documentation
   *   The documentation.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getDocumentation(DocumentationInterface $documentation): TokenStreamInterface;

  /**
   * Get the method as a token stream.
   *
   * @param \Xylemical\Code\Definition\Method $method
   *   The method.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getMethod(Method $method): TokenStreamInterface;

  /**
   * Get the parameter as a token stream.
   *
   * @param \Xylemical\Code\Definition\Parameter $parameter
   *   The parameter.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getParameter(Parameter $parameter): TokenStreamInterface;

  /**
   * Get the property as a token stream.
   *
   * @param \Xylemical\Code\Definition\Property $property
   *   The property.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getProperty(Property $property): TokenStreamInterface;

  /**
   * Get unknown element as a token stream.
   *
   * @param \Xylemical\Code\Definition\ElementInterface $element
   *   The element.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getElement(ElementInterface $element): TokenStreamInterface;

  /**
   * Get the constant as a token stream.
   *
   * @param \Xylemical\Code\Definition\Constant $constant
   *   The constant.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getConstant(Constant $constant): TokenStreamInterface;

  /**
   * Get an expression as a token stream.
   *
   * @param \Xylemical\Code\ExpressionInterface $expression
   *   The expression.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getExpression(ExpressionInterface $expression): TokenStreamInterface;

  /**
   * Get unknown definition as a token stream.
   *
   * @param \Xylemical\Code\DefinitionInterface $definition
   *   The definition.
   *
   * @return \Xylemical\Token\TokenStreamInterface
   *   The token stream.
   */
  public function getDefinition(DefinitionInterface $definition): TokenStreamInterface;

}
